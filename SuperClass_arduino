#include <ArduinoJson.h>
#include "DFRobotDFPlayerMini.h"
#include <Adafruit_NeoPixel.h>

Adafruit_NeoPixel pixels(16, 6, NEO_GRB + NEO_KHZ800); // led소자수, 입력핀, 

DFRobotDFPlayerMini myDFPlayer;

const String SSID = "AndroidHotspot8722"; // SMHRD_강의실A
const String PASSWORD = "dreamingcity02"; // aaaaa11111
// 서버주소와 포트 (변경할 부분)
const String SERVER_IP = "192.168.43.242"; // 172.30.1.15
const String SERVER_PORT = "8087";

String cmd = "";
// 전송 데이터 저장
String sendData = "";

// 전송할 데이터 저장
String jsonData = "";

// WiFi 접속 실패 여부r
boolean FAIL_8266 = false;
// TX, RX

void setup() {
  pinMode(13,OUTPUT); // led
  pinMode(7,INPUT); // sensor
  Serial1.begin(9600); // myDFPlayer
 

  Serial.println("Start module connection");
  do {
    Serial.begin(9600);
    Serial3.begin(9600);
    // ESP8266 모듈 재시작
    Serial3.println("AT+RST");
    delay(1000);
    // 만약 재시작되었다면
    if (Serial3.find("ready")) {
      Serial.println("Module ready");
      // ESP8266 모듈의 모드를 듀얼모드로 설정 (클라이언트)
      Serial3.println("AT+CWMODE=3");
      delay(1000);
      // AP에 접속되면
      if (cwJoinAP()) {
        Serial.println("AP successful");
        FAIL_8266 = false;
        delay(1000);
        Serial.println("Start buffer initialization");
        while (Serial3.available() > 0) {
          char a = Serial3.read();
          Serial.write(a);
        }
        Serial.println();
        Serial.println("Buffer initialization terminated");
      } else {
        Serial.println("AP connection failure");
        delay(1000);
        FAIL_8266 = true;
      }
    } else {
      Serial.println("Module connection failure");
      delay(1000);
      FAIL_8266 = true;
    }
  } while (FAIL_8266);
  Serial.println("Module connection complete");  

   // myDFPlayer.volume(20);
   // myDFPlayer.play(1);
  
}

boolean a = true;
String msg="";

String sleep_time = "";
String wake_time =  "";
String fade_in = "";
String weather = "";

void loop() {
    if (a) {
    String char_output ="";
    int a = digitalRead(7);
    char_output = String(a);
    Serial.println(char_output);
    
    sendDataToServer();
    
    Serial.println(msg);
    DynamicJsonBuffer jsonBuffer;
    JsonObject& root = jsonBuffer.parseObject(msg);
    
    Serial.print("Checking MyValue : ");
    String b = root["s"];
    sleep_time = b;    
    Serial.println(sleep_time);
    
    String c = root["w"];
    wake_time = c ;
    Serial.println(wake_time);
    
    String d = root["f"];
    fade_in = d;
    Serial.println(fade_in);

    String e = root["wt"];
    weather = e;
    Serial.println(weather); 
    
    msg = "";
    ex001();
    msg = "";
  }
  

}


void sendDataToServer() {
  Serial.println("Start the data transfer part");
  cmd = "AT+CIPSTART=\"TCP\",\"" + SERVER_IP + "\"," + SERVER_PORT + "\r\n";
  Serial.println("Attempt to connect to server");
  Serial3.println(cmd);
  // 웹 서버에 접속되면
  if (Serial3.find("OK")) {
    Serial.println("Server connection successful");
  } else {
    Serial.println("Server connection failed");
  }

  // 서버로 GET 메시지 전송
  cmd = "GET /test/GetWeatherArduino"; // uptime fadetime
  cmd += "\r\nConnection: close\r\n\r\n";

  Serial.println(cmd);
  Serial3.print("AT+CIPSEND=");
  Serial3.println(cmd.length());
  if (Serial3.find("OK")) {
    Serial.println("Ready to send to server");
  } else {
    Serial.println("Failed to prepare to send to server");
  }
  Serial3.println(cmd);
  
  //데이터 전송이 완료되면
  if (Serial3.find("OK")) {
    Serial.println("Data transfer successful");
    Serial.println();
    delay(1000);
    Serial.println("Attempt to receive data");
    boolean check = false;
    
    while (Serial3.available()) {
      char c = Serial3.read();
      Serial.print(c);
      if(c == '{'){
        check=true;
      }
      if(check){
        msg+=c;
      }
      if(c=='}'){
        check=false;
      }
    }
    Serial.println();
    Serial.println("End Receiving Data");
  } else {
    Serial.println("Data transfer failed");
    sendDataToServer();
  }
  delay(1000);
}

void ex001(){
  Serial.println("Start the data transfer part");
  cmd = "AT+CIPSTART=\"TCP\",\"" + SERVER_IP + "\"," + SERVER_PORT + "\r\n";
  Serial.println("Attempt to connect to server");
  Serial3.println(cmd);
  // 웹 서버에 접속되면
  if (Serial3.find("OK")) {
    Serial.println("Server connection successful");
  } else {
    Serial.println("1 connection failed");
  }
  
  cmd = "GET /test/ex001?sleeptime="+sleep_time+"&uptime="+wake_time+"&fadetime="+fade_in+"&weather="+weather;
  cmd += "\r\nConnection: close\r\n\r\n";

  Serial.println(cmd);
  Serial3.print("AT+CIPSEND=");
  Serial3.println(cmd.length());
  if (Serial3.find("OK")) {
    Serial.println("Ready to inputSensor");
  } else {
    Serial.println("1 to prepare to send to 1");
  }
  Serial3.println(cmd);
  
  //데이터 전송이 완료되면
   if (Serial3.find("OK")) {
    Serial.println("Data transfer successful");
    Serial.println();
    delay(1000);
    Serial.println("Attempt to receive data");
    Serial.println();
    Serial.println("End Receiving Data");
  } else {
    Serial.println("Data transfer failed");
    ex001();
  }
  delay(1000);
}

void inputSensor(int a){
  Serial.println("Start the data transfer part");
  cmd = "AT+CIPSTART=\"TCP\",\"" + SERVER_IP + "\"," + SERVER_PORT + "\r\n";
  Serial.println("Attempt to connect to server");
  Serial3.println(cmd);
  // 웹 서버에 접속되면
  if (Serial3.find("OK")) {
    Serial.println("Server connection successful");
  } else {
    Serial.println("Server connection failed");
  }
  
  cmd = "GET /test/InputSensor?moveSensor=";
  cmd += a;
  cmd += "\r\nConnection: close\r\n\r\n";

  Serial.println(cmd);
  Serial3.print("AT+CIPSEND=");
  Serial3.println(cmd.length());
  if (Serial3.find("OK")) {
    Serial.println("Ready to inputSensor");
  } else {
    Serial.println("Failed to prepare to send to inputSensor");
  }
  Serial3.println(cmd);
  
  //데이터 전송이 완료되면
   if (Serial3.find("OK")) {
    Serial.println("Data transfer successful");
    Serial.println();
    delay(1000);
    Serial.println("Attempt to receive data");
    Serial.println();
    Serial.println("End Receiving Data");
  } else {
    Serial.println("Data transfer failed");
    inputSensor(a);
  }
  delay(1000);
}

void mp3player(String e) {
 
  myDFPlayer.volume(20); // 볼륨을 조절합니다. 0~30까지 설정이 가능합니다.
  
  if(Serial.available()){
    a = Serial.read();
    Serial.print(a);
    switch(a){
      case '1':
      myDFPlayer.play(1);
      break;
       case '2':
      myDFPlayer.play(2);
      break;
       case '3':
      myDFPlayer.play(3);
      break;
       case '4':
      myDFPlayer.play(4);
      break;
        case '5':
      myDFPlayer.play(5);
      break;
    }
  }
    
}

void ledon() {

 // strip.begin(); //  Neopixel 제어를 시작          
 // strip.show(); //  Neopixel 제어를 시작
  // strip.setBrightness(BRIGHTNESS);  //  BRIGHTNESS 만큼 밝기 설정 
  
}

boolean cwJoinAP() {
  String cmd = "AT+CWJAP=\"" + SSID + "\",\"" + PASSWORD + "\"";
  Serial3.println(cmd);
  if (Serial3.find("OK")) {
    return true;
  } else {
    return false;
  }

}
